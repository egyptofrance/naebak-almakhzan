name: Deploy Naebak Services to Google Cloud Run

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: naebak-472518
  REGION: us-central1

jobs:
  # Test Jobs
  test-django:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [naebak-auth-service, naebak-complaints-service, naebak-admin-service, naebak-messaging-service, naebak-content-service, naebak-ratings-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage.xml

  test-flask:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [naebak-gateway, naebak-visitor-counter-service, naebak-statistics-service, naebak-news-service, naebak-banner-service, naebak-theme-service, naebak-notifications-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: |
        python -m pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        frontend: [naebak-frontend, naebak-admin-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.frontend }}/package-lock.json
    
    - name: Install dependencies
      working-directory: ./${{ matrix.frontend }}
      run: npm ci
    
    - name: Run lint
      working-directory: ./${{ matrix.frontend }}
      run: npm run lint
    
    - name: Type check
      working-directory: ./${{ matrix.frontend }}
      run: npm run type-check
    
    - name: Build
      working-directory: ./${{ matrix.frontend }}
      run: npm run build

  # Deploy Jobs (only on main branch)
  deploy-django:
    if: github.ref == 'refs/heads/main'
    needs: test-django
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [naebak-auth-service, naebak-complaints-service, naebak-admin-service, naebak-messaging-service, naebak-content-service, naebak-ratings-service]
        include:
          - service: naebak-auth-service
            port: 8001
          - service: naebak-complaints-service
            port: 8003
          - service: naebak-admin-service
            port: 8002
          - service: naebak-messaging-service
            port: 8004
          - service: naebak-content-service
            port: 8005
          - service: naebak-ratings-service
            port: 8006
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      working-directory: ./${{ matrix.service }}
      run: |
        cp ../Dockerfile.django ./Dockerfile
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }} .
    
    - name: Push Docker image
      run: docker push gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ matrix.service }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --port ${{ matrix.port }} \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=False" \
          --set-env-vars="ALLOWED_HOSTS=${{ matrix.service }}-${{ secrets.CLOUD_RUN_HASH }}-uc.a.run.app" \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10

  deploy-flask:
    if: github.ref == 'refs/heads/main'
    needs: test-flask
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [naebak-gateway, naebak-visitor-counter-service, naebak-statistics-service, naebak-news-service, naebak-banner-service, naebak-theme-service, naebak-notifications-service]
        include:
          - service: naebak-gateway
            port: 8007
          - service: naebak-visitor-counter-service
            port: 8008
          - service: naebak-statistics-service
            port: 8009
          - service: naebak-news-service
            port: 8010
          - service: naebak-banner-service
            port: 8011
          - service: naebak-theme-service
            port: 8012
          - service: naebak-notifications-service
            port: 8013
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      working-directory: ./${{ matrix.service }}
      run: |
        cp ../Dockerfile.flask ./Dockerfile
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }} .
    
    - name: Push Docker image
      run: docker push gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ matrix.service }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --port ${{ matrix.port }} \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=False" \
          --memory=256Mi \
          --cpu=0.5 \
          --min-instances=0 \
          --max-instances=5

  deploy-frontend:
    if: github.ref == 'refs/heads/main'
    needs: test-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        frontend: [naebak-frontend, naebak-admin-frontend]
        include:
          - frontend: naebak-frontend
            port: 3000
            instances: 2
          - frontend: naebak-admin-frontend
            port: 3001
            instances: 1
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      working-directory: ./${{ matrix.frontend }}
      run: docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ matrix.frontend }}:${{ github.sha }} .
    
    - name: Push Docker image
      run: docker push gcr.io/${{ env.PROJECT_ID }}/${{ matrix.frontend }}:${{ github.sha }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ matrix.frontend }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ matrix.frontend }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --port ${{ matrix.port }} \
          --allow-unauthenticated \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=${{ matrix.instances }} \
          --max-instances=10

  # Notification Job
  notify:
    if: always()
    needs: [deploy-django, deploy-flask, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-django.result }}" == "success" ] && [ "${{ needs.deploy-flask.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "✅ All services deployed successfully!"
        else
          echo "❌ Some deployments failed!"
          exit 1
        fi
